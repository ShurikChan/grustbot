import requests
from bs4 import BeautifulSoup
import telebot
import json
from datetime import datetime

TOKEN = '7737186245:AAHz3qVUNim8TuPiRD-Zvl-R5eIwxAbo1qU'
bot = telebot.TeleBot(TOKEN)


def get_steamid(profileurl: str):
    url = f'https://findsteamid.com/steamid/{profileurl}'
    response = requests.get(url)

    if response.status_code == 200:
        html = response.text
        soup = BeautifulSoup(html, 'html.parser')
        data = soup.find_all('span', class_='text-orange-400')
        steamid = data[2].text

        grust_response = requests.get(f'https://grust.co/api/users/{steamid}')

        if grust_response.status_code == 200:
            data = grust_response.text
            json_data = json.loads(data)
            if json_data["data"] is None:
                raise Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–≥—Ä–∞–ª –≤ grust')

            lastseen = json_data["data"]["lastseen"]
            playtime = json_data["data"]["playtime"]
            firstjoin = json_data["data"]["firstjoin"]

            if isinstance(lastseen, int) and isinstance(playtime, int) and isinstance(firstjoin, int):
                lastseen_datetime = datetime.fromtimestamp(lastseen)
                now = datetime.now()
                days_ago = (now - lastseen_datetime).days

                firstjoin_datetime = datetime.fromtimestamp(firstjoin)
                firstjoin_days_ago = (now - firstjoin_datetime).days

                banned = "–î–∞" if json_data["data"]["banned"] else "–ù–µ—Ç"

                return f'–ò–º—è: {json_data["data"]["name"]}\n' \
                    f'–ë–∞–Ω: {banned}\n' \
                    f'–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –±—ã–ª: {days_ago} –¥–Ω–µ–π –Ω–∞–∑–∞–¥\n' \
                    f'–í—Ä–µ–º—è –≤ –∏–≥—Ä–µ: {int(round(playtime / 3600, 0))} —á–∞—Å–æ–≤\n' \
                    f'–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {firstjoin_days_ago} –¥–Ω–µ–π –Ω–∞–∑–∞–¥\n'\
                    f'Scrapcoins: {json_data["data"]["scrapcoins"]} üí∞\n'\
                    f'STEAMID64: {steamid}\n' \
                    f'–†–æ–ª—å: {json_data["data"]["rank"]}\n'
            else:
                return "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏."
        else:
            return f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç API Grust. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {grust_response.status_code}"
    else:
        return f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç API FindSteamID. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}"


@bot.message_handler(content_types=['text'])
def text_message(message):
    profile_url = message.text
    try:
        steam_url = get_steamid(profile_url)
        bot.send_message(message.chat.id, steam_url)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π Steam id")


@bot.message_handler(new_chat_members=['BubueBot'])
def welcome_message(message):
    welcome_text = "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Ç–∏–º –∞–π–¥–∏ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—É—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –≤ –≥—Ä–∞—Å—Ç."
    bot.send_message(message.chat.id, welcome_text)


if __name__ == '__main__':
    bot.polling(non_stop=True)
